import tkinter as tk
from tkinter import ttk, messagebox
import requests
import threading
import selenium
from selenium import webdriver
import time
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import datetime
import calendar
from tkcalendar import DateEntry
import webbrowser
from PIL import Image, ImageTk
import os
import random
import sys

# ======= HOT RELOAD FUNCTION =======
def hot_reload():
    """Hot reload function - Reload app without restarting"""
    try:
        # Import l·∫°i module hi·ªán t·∫°i
        import importlib
        current_module = sys.modules[__name__]
        importlib.reload(current_module)
        
        # ƒê√≥ng window hi·ªán t·∫°i
        root.quit()
        root.destroy()
        
        # Restart app
        os.system(f'python "{__file__}"')
        
    except Exception as e:
        show_copy_notify(f"Hot reload failed: {e}", JT_ERROR)

# ======= BI·∫æN TO√ÄN C·ª§C & H√ÄM TI·ªÜN √çCH (KHAI B√ÅO ƒê·∫¶U FILE) =======
now = datetime.datetime.now()
def get_month_list(years_back=2):
    months = []
    for y in range(now.year, now.year-years_back, -1):
        for m in range(12, 0, -1):
            if y == now.year and m > now.month:
                continue
            months.append(f"{m:02d}-{y}")
    return months
month_list = get_month_list(3)
def get_start_end_from_month(month_str):
    m, y = map(int, month_str.split("-"))
    start = datetime.date(y, m, 1)
    if y == now.year and m == now.month:
        end = now.date()
    else:
        end = datetime.date(y, m, calendar.monthrange(y, m)[1])
    return start, end

# H√†m fetch s·ªë ƒëi·ªán tho·∫°i t·ª´ API
def fetch_phone(waybill_id, auth_token):
    url = f"https://jmsgw.jtexpress.vn/servicequality/integration/getWaybillsByReverse?type=1&waybillId={waybill_id}"
    headers = {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=utf-8",
        "authToken": auth_token,
        "lang": "VN",
        "langType": "VN",
        "Origin": "https://jms.jtexpress.vn",
        "Referer": "https://jms.jtexpress.vn/",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "routeName": "integratedComprehensive",
        "routerNameList": "%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F%3E%E7%BB%BC%E5%90%88%E6%9F%A5%E8%AF%A2%3E%E4%B8%80%E4%BD%93%E5%8C%96%E6%9F%A5%E8%AF%A2%EF%BC%88%E6%96%B0%EF%BC%89",
        "timezone": "GMT+0700"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            if data.get("succ") and data.get("data"):
                return data["data"].get("receiverMobilePhone", "")
            else:
                return "Kh√¥ng t√¨m th·∫•y"
        else:
            return f"L·ªói {resp.status_code}"
    except Exception as e:
        return f"L·ªói: {e}"

def fetch_shipper(phone, auth_token, start=None, end=None):
    url = "https://jmsgw.jtexpress.vn/networkmanagement/dispatchWaybill/list"
    # N·∫øu kh√¥ng truy·ªÅn start/end th√¨ l·∫•y m·∫∑c ƒë·ªãnh th√°ng hi·ªán t·∫°i
    now = datetime.datetime.now()
    if not start:
        start = now.replace(day=1).strftime("%Y-%m-%d")
    if not end:
        end = now.replace(day=calendar.monthrange(now.year, now.month)[1]).strftime("%Y-%m-%d")
    body = {
        "current": 1,
        "size": 10,
        "oneNetwork": "028001",
        "receiverMobilePhone": phone,
        "twoNetwork": "028001",
        "searchTimeType": 0,
        "startTime": f"{start} 00:00:00",
        "endTime": f"{end} 23:59:59",
        "networkType": 2,
        "dispatchFinanceCode": "028001",
        "dispatchFinanceId": 4993,
        "franchiseeCode": "028001",
        "franchiseeId": 4993,
        "countryId": "1"
    }
    headers = {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json;charset=UTF-8",
        "authToken": auth_token,
        "lang": "VN",
        "langType": "VN",
        "Origin": "https://jms.jtexpress.vn",
        "Referer": "https://jms.jtexpress.vn/",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "routeName": "dispatchWaybill",
        "routerNameList": "%E7%BD%91%E7%82%B9%E7%82%B9%E7%BB%8F%E8%90%A5%3E%E8%BF%90%E5%8D%95%E7%AE%A1%E7%90%86%3E%E6%B4%BE%E4%BB%B6%E8%BF%90%E5%8D%95%E7%AE%A1%E7%90%86",
        "timezone": "GMT+0700"
    }
    try:
        print(f"[DEBUG] G·ªçi API2 v·ªõi SƒêT: {phone}, start: {start}, end: {end}")
        resp = requests.post(url, headers=headers, json=body, timeout=10)
        print(f"[DEBUG] Status: {resp.status_code}")
        print(f"[DEBUG] Response: {resp.text}")
        if resp.status_code == 200:
            data = resp.json()
            records = data.get("data", [])
            # N·∫øu records l√† dict (ki·ªÉu c≈©), l·∫•y .get('records', [])
            if isinstance(records, dict):
                records = records.get("records", [])
            if isinstance(records, list) and len(records) > 0 and "dispatchStaffName" in records[0]:
                print(f"[DEBUG] T√™n shipper l·∫•y ƒë∆∞·ª£c: {records[0]['dispatchStaffName']}")
                return records[0]["dispatchStaffName"]
            else:
                print("[DEBUG] Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng dispatchStaffName trong records")
                return "Kh√¥ng t√¨m th·∫•y shipper"
        else:
            return f"L·ªói {resp.status_code}"
    except Exception as e:
        print(f"[DEBUG] Exception khi g·ªçi API2: {e}")
        return f"L·ªói: {e}"

# H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t tra c·ª©u - Updated for new UI v·ªõi cancel
def tra_cuu():
    waybills = txt_waybills.get("1.0", tk.END).strip().splitlines()
    auth_token = txt_token.get().strip()
    start, end = get_start_end_from_month(cb_month_top.get())
    start = start.strftime("%Y-%m-%d")
    end = end.strftime("%Y-%m-%d")
    
    if not waybills or not auth_token:
        messagebox.showwarning("‚ö†Ô∏è Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m√£ v·∫≠n ƒë∆°n v√† authToken!")
        return
    
    # Check if currently processing
    if hasattr(tra_cuu, 'is_processing') and tra_cuu.is_processing:
        # Cancel current operation
        tra_cuu.should_cancel = True
        btn_tra_cuu.config(text="üõë ƒêANG H·ª¶Y...", bg=JT_WARNING)
        return
        
    # Start processing
    tra_cuu.is_processing = True
    tra_cuu.should_cancel = False
    
    # Update UI state
    btn_tra_cuu.config(state=tk.NORMAL, text="üõë H·ª¶Y", bg=JT_ERROR)
    for row in tree.get_children():
        tree.delete(row)
    
    def show_countdown(secs):
        if hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel:
            return
        countdown_frame.pack(fill=tk.X, pady=(8, 0))
        def update(sec_left):
            if sec_left <= 0 or (hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel):
                countdown_label.config(text="")
                countdown_frame.pack_forget()
                return
            countdown_label.config(text=f"‚è≥ Ch·ªù {sec_left}s ƒë·ªÉ tr√°nh spam...")
            countdown_label.after(1000, lambda: update(sec_left-1))
        update(secs)
    
    def worker():
        success_count = 0
        processed_count = 0
        total_count = len([w for w in waybills if w.strip()])
        
        for idx, waybill in enumerate(waybills):
            # Check for cancellation
            if hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel:
                break
                
            waybill = waybill.strip()
            if not waybill:
                continue
                
            processed_count += 1
            
            # Update progress in button
            progress = f"üìä {processed_count}/{total_count}"
            btn_tra_cuu.config(text=progress)
            
            phone = fetch_phone(waybill, auth_token)
            
            # Check for cancellation after API call
            if hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel:
                break
            
            # Auto lookup shipper if valid phone
            if phone and phone.isdigit() and len(phone) >= 8:
                ten_shipper = fetch_shipper(phone, auth_token, start, end)
                if not ten_shipper or 'kh√¥ng' in ten_shipper.lower() or 'l·ªói' in ten_shipper.lower():
                    ten_shipper = "Kh√¥ng t√¨m th·∫•y shipper"
                else:
                    success_count += 1
            else:
                ten_shipper = ""
            
            tree.insert("", tk.END, values=(waybill, phone, ten_shipper))
            
            # Stealth mode delay
            if stealth_mode.get() and idx < len(waybills) - 1:  # Don't delay on last item
                try:
                    dmin = int(delay_min.get())
                    dmax = int(delay_max.get())
                    if dmin > dmax:
                        dmin, dmax = dmax, dmin
                except:
                    dmin, dmax = 5, 10
                delay = random.randint(dmin, dmax)
                show_countdown(delay)
                for i in range(delay):
                    if hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel:
                        break
                    time.sleep(1)
                countdown_frame.pack_forget()
        
        # Reset UI state
        tra_cuu.is_processing = False
        btn_tra_cuu.config(
            state=tk.NORMAL, 
            text="üöÄ B·∫ÆT ƒê·∫¶U TRA C·ª®U", 
            bg=JT_RED
        )
        
        # Show completion message
        if hasattr(tra_cuu, 'should_cancel') and tra_cuu.should_cancel:
            completion_msg = f"üõë ƒê√£ h·ªßy! ƒê√£ tra c·ª©u {processed_count}/{total_count} ƒë∆°n"
            show_copy_notify(completion_msg, JT_WARNING)
        else:
            completion_msg = f"‚úÖ Ho√†n th√†nh! Tra c·ª©u ƒë∆∞·ª£c {success_count}/{total_count} shipper"
            show_copy_notify(completion_msg, JT_RESULT)
        
    threading.Thread(target=worker, daemon=True).start()

# ƒê·ªãnh nghƒ©a h√†m tra_cuu_shipper TR∆Ø·ªöC
def tra_cuu_shipper():
    phone = txt_phone.get().strip()
    auth_token = txt_token.get().strip()
    start, end = get_start_end_from_month(cb_month_shipper.get())
    start = start.strftime("%Y-%m-%d")
    end = end.strftime("%Y-%m-%d")
    if not phone or not auth_token or not start or not end:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·ªß SƒêT, token, th√°ng!")
        return
    btn_tra_cuu_shipper.config(state=tk.DISABLED)
    lbl_shipper_result.config(text="ƒêang tra c·ª©u...", fg="orange")
    def worker():
        ten_shipper = fetch_shipper(phone, auth_token, start, end)
        if "kh√¥ng" in ten_shipper.lower() or "l·ªói" in ten_shipper.lower():
            lbl_shipper_result.config(text=f"T√™n shipper: {ten_shipper}", fg="red")
        else:
            lbl_shipper_result.config(text=f"T√™n shipper: {ten_shipper}", fg="green")
        btn_tra_cuu_shipper.config(state=tk.NORMAL)
    threading.Thread(target=worker, daemon=True).start()

def get_token_from_chrome():
    try:
        options = webdriver.ChromeOptions()
        options.add_argument(r'user-data-dir=C:/Users/Administrator/AppData/Local/Google/Chrome/User Data')
        options.add_argument('profile-directory=Profile 2')
        options.add_experimental_option('detach', True)
        driver = webdriver.Chrome(options=options)
        driver.get('https://jms.jtexpress.vn/')
        time.sleep(3)  # ƒê·ª£i trang load, c√≥ th·ªÉ tƒÉng n·∫øu m·∫°ng ch·∫≠m
        token = driver.execute_script("return window.localStorage.getItem('YL_TOKEN');")
        driver.quit()
        if token:
            txt_token.delete(0, tk.END)
            txt_token.insert(0, token)
            show_copy_notify('L·∫•y token th√†nh c√¥ng!', JT_RESULT)
        else:
            show_copy_notify('Kh√¥ng t√¨m th·∫•y YL_TOKEN trong localStorage!', JT_ERROR)
    except Exception as e:
        show_copy_notify(f'L·∫•y token th·∫•t b·∫°i: {e}', JT_ERROR)

def get_token_from_chrome_debug():
    try:
        chrome_options = Options()
        chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        service = Service('chromedriver.exe')
        driver = webdriver.Chrome(service=service, options=chrome_options)
        # L·∫•y danh s√°ch c√°c tab ƒëang m·ªü
        handles = driver.window_handles
        if handles:
            driver.switch_to.window(handles[0])  # Gi·ªØ nguy√™n tab hi·ªán t·∫°i (tab ƒë·∫ßu ti√™n)
            token = driver.execute_script("return window.localStorage.getItem('YL_TOKEN');")
        else:
            token = None
        driver.quit()
        if token:
            txt_token.delete(0, tk.END)
            txt_token.insert(0, token)
            show_copy_notify('L·∫•y token t·ª´ Chrome ƒëang m·ªü th√†nh c√¥ng!', JT_RESULT)
        else:
            show_copy_notify('Kh√¥ng t√¨m th·∫•y YL_TOKEN trong localStorage!', JT_ERROR)
    except Exception as e:
        show_copy_notify(f'L·∫•y token th·∫•t b·∫°i: {e}', JT_ERROR)

# ======= ENHANCED STYLE J&T =======
JT_RED = "#e60012"         # ƒê·ªè J&T ch√≠nh
JT_RED_LIGHT = "#ffebee"   # ƒê·ªè nh·∫°t
JT_RED_DARK = "#b71c1c"    # ƒê·ªè ƒë·∫≠m
JT_GRAY = "#f8f9fa"        # X√°m n·ªÅn modern
JT_GRAY_LIGHT = "#ffffff"  # Tr·∫Øng
JT_GRAY_DARK = "#6c757d"   # X√°m ƒë·∫≠m
JT_WHITE = "#ffffff"
JT_LABEL = "#212529"       # ƒêen nh·∫π
JT_BTN_TEXT = "#fff"
JT_TITLE = JT_RED
JT_RESULT = "#28a745"      # Xanh success
JT_ERROR = "#dc3545"       # ƒê·ªè error
JT_WARNING = "#ffc107"     # V√†ng warning
JT_INFO = "#17a2b8"        # Xanh info

# Shadow effects
JT_SHADOW = "#e9ecef"

# KH·ªûI T·∫†O ROOT TR∆Ø·ªöC
root = tk.Tk()
root.title("üöö Tool Tra C·ª©u J&T Express - v2.0")
root.geometry("1200x900")  # TƒÉng th√™m width cho ƒë·∫πp
root.resizable(True, True)
root.configure(bg=JT_GRAY)
root.minsize(1000, 700)

# Set icon n·∫øu c√≥
try:
    root.iconbitmap("Logo_JT.ico") if os.path.exists("Logo_JT.ico") else None
except:
    pass

# ======= KH·ªûI T·∫†O TKINTER VARIABLES SAU ROOT =======
stealth_mode = tk.BooleanVar(value=True)
delay_min = tk.IntVar(value=5)
delay_max = tk.IntVar(value=10)

# ======= MAIN CONTAINER WITH PADDING =======
main_container = tk.Frame(root, bg=JT_GRAY)
main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

# ======= MODERN HEADER SECTION =======
header_frame = tk.Frame(main_container, bg=JT_GRAY, height=80)
header_frame.pack(fill=tk.X, pady=(0, 20))
header_frame.pack_propagate(False)

# Header top row - Links v√† buttons
header_top = tk.Frame(header_frame, bg=JT_GRAY, height=35)
header_top.pack(fill=tk.X, pady=(5, 0))

# GitHub repository button - Enhanced v·ªõi vi·ªÅn
github_frame = tk.Frame(header_top, bg=JT_RED, relief=tk.RAISED, bd=1)
github_frame.pack(side=tk.LEFT)

def open_github(event=None):
    webbrowser.open_new(r"https://github.com/Kurok00/PhatSotToolV2")

def on_github_hover(event):
    github_frame.config(bg=JT_RED_DARK)
    github_label.config(bg=JT_RED_DARK)

def on_github_leave(event):
    github_frame.config(bg=JT_RED)
    github_label.config(bg=JT_RED)

# S·ª≠ d·ª•ng icon GitHub Unicode thay v√¨ file ·∫£nh
github_label = tk.Label(
    github_frame,
    text="ÔøΩ GitHub Repository",
    font=("Segoe UI", 9, "bold"),
    fg=JT_WHITE,
    bg=JT_RED,
    padx=12,
    pady=6,
    cursor="hand2"
)
github_label.pack()
github_label.bind("<Button-1>", open_github)
github_label.bind("<Enter>", on_github_hover)
github_label.bind("<Leave>", on_github_leave)
github_frame.bind("<Button-1>", open_github)
github_frame.bind("<Enter>", on_github_hover)
github_frame.bind("<Leave>", on_github_leave)

# Reset Tool Button - Changed from Hot Reload
# Reset Tool Function - Real reset functionality
def reset_tool():
    """Reset tool v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu"""
    try:
        # X√≥a token
        txt_token.delete(0, tk.END)
        
        # X√≥a m√£ v·∫≠n ƒë∆°n
        txt_waybills.delete("1.0", tk.END)
        
        # X√≥a s·ªë ƒëi·ªán tho·∫°i
        txt_phone.delete(0, tk.END)
        
        # Reset th√°ng v·ªÅ th√°ng hi·ªán t·∫°i
        cb_month_top.set(f"{now.month:02d}-{now.year}")
        cb_month_shipper.set(f"{now.month:02d}-{now.year}")
        
        # C·∫≠p nh·∫≠t range hi·ªÉn th·ªã
        update_range_top()
        update_range_shipper()
        
        # X√≥a k·∫øt qu·∫£ treeview
        for row in tree.get_children():
            tree.delete(row)
        
        # Reset k·∫øt qu·∫£ shipper
        lbl_shipper_result.config(text="K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...", fg=JT_GRAY_DARK)
        
        # Reset counter
        update_waybill_count()
        
        # Reset button states
        btn_tra_cuu.config(state=tk.NORMAL, text="üöÄ B·∫ÆT ƒê·∫¶U TRA C·ª®U", bg=JT_RED)
        btn_tra_cuu_shipper.config(state=tk.NORMAL)
        
        # ·∫®n countdown frame n·∫øu ƒëang hi·ªÉn th·ªã
        countdown_frame.pack_forget()
        
        # Reset delay values v·ªÅ m·∫∑c ƒë·ªãnh
        delay_min.set(5)
        delay_max.set(10)
        
        # Reset stealth mode v·ªÅ True
        stealth_mode.set(True)
        
        # Hi·ªÉn th·ªã th√¥ng b√°o reset th√†nh c√¥ng
        show_copy_notify("üîÑ Tool ƒë√£ ƒë∆∞·ª£c reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu!", JT_RESULT)
        
    except Exception as e:
        show_copy_notify(f"‚ùå L·ªói khi reset tool: {e}", JT_ERROR)

def on_reset_hover(event):
    reset_frame.config(bg=JT_WARNING)
    reset_label.config(bg=JT_WARNING)

def on_reset_leave(event):
    reset_frame.config(bg=JT_INFO)
    reset_label.config(bg=JT_INFO)

reset_frame = tk.Frame(header_top, bg=JT_INFO, relief=tk.RAISED, bd=1)
reset_frame.pack(side=tk.LEFT, padx=(10, 0))

reset_label = tk.Label(
    reset_frame,
    text="ÔøΩ Reset Tool",
    font=("Segoe UI", 9, "bold"),
    fg=JT_WHITE,
    bg=JT_INFO,
    padx=12,
    pady=6,
    cursor="hand2"
)
reset_label.pack()
reset_label.bind("<Button-1>", lambda e: reset_tool())
reset_label.bind("<Enter>", on_reset_hover)
reset_label.bind("<Leave>", on_reset_leave)
reset_frame.bind("<Button-1>", lambda e: reset_tool())
reset_frame.bind("<Enter>", on_reset_hover)
reset_frame.bind("<Leave>", on_reset_leave)

# Made by label - Right side v·ªõi khung ƒë·ªè ch·ªØ ƒëen ƒë·∫≠m
madeby_frame = tk.Frame(header_top, bg=JT_RED, relief=tk.RAISED, bd=2)
madeby_frame.pack(side=tk.RIGHT, padx=(0, 5))

madeby_label = tk.Label(
    madeby_frame,
    text="Made with üíñ by Ch√∫ 7 Dog",
    font=("Segoe UI", 9, "bold"),
    fg=JT_WHITE,
    bg=JT_RED,
    padx=12,
    pady=6
)
madeby_label.pack()

# Main title - Modern typography
title_frame = tk.Frame(header_frame, bg=JT_GRAY)
title_frame.pack(expand=True, fill=tk.BOTH)

title = tk.Label(
    title_frame, 
    text="üöö Tool Tra C·ª©u J&T Express", 
    font=("Segoe UI", 24, "bold"), 
    fg=JT_TITLE, 
    bg=JT_GRAY
)
title.pack(expand=True)

subtitle = tk.Label(
    title_frame,
    text="Tra c·ª©u th√¥ng tin shipper & kh√°ch h√†ng nhanh ch√≥ng",
    font=("Segoe UI", 11),
    fg=JT_GRAY_DARK,
    bg=JT_GRAY
)
subtitle.pack()

# ======= MODERN CARD-BASED LAYOUT =======
# Main content container
content_container = tk.Frame(main_container, bg=JT_GRAY)
content_container.pack(fill=tk.BOTH, expand=True)

# Left panel - Forms
left_panel = tk.Frame(content_container, bg=JT_GRAY, width=580)
left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
left_panel.pack_propagate(False)

# Right panel - Results  
right_panel = tk.Frame(content_container, bg=JT_GRAY)
right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

# ======= CARD 1: BATCH LOOKUP - Enhanced v·ªõi vi·ªÅn =======
card1 = tk.LabelFrame(
    left_panel, 
    text="  üì¶ Tra c·ª©u Batch (Nhi·ªÅu m√£ v·∫≠n ƒë∆°n)  ", 
    font=("Segoe UI", 12, "bold"), 
    fg=JT_TITLE, 
    bg=JT_WHITE, 
    bd=2,
    relief=tk.GROOVE,
    padx=15,
    pady=15
)
card1.pack(fill=tk.X, pady=(0, 15))

# Token input - Modern design
token_frame = tk.Frame(card1, bg=JT_WHITE)
token_frame.pack(fill=tk.X, pady=(0, 12))

tk.Label(
    token_frame, 
    text="üîë Auth Token:", 
    font=("Segoe UI", 10, "bold"), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack(anchor=tk.W, pady=(0, 4))

token_input_frame = tk.Frame(token_frame, bg=JT_WHITE)
token_input_frame.pack(fill=tk.X)

txt_token = tk.Entry(
    token_input_frame, 
    font=("Consolas", 10), 
    bg=JT_GRAY, 
    relief=tk.SUNKEN, 
    bd=2,
    fg=JT_LABEL
)
txt_token.pack(side=tk.LEFT, fill=tk.X, expand=True)

btn_get_token_debug = tk.Button(
    token_input_frame, 
    text="ÔøΩ Auto ƒêƒÉng nh·∫≠p", 
    command=get_token_from_chrome_debug, 
    font=("Segoe UI", 9, "bold"), 
    bg=JT_INFO, 
    fg=JT_WHITE, 
    relief=tk.FLAT, 
    bd=0,
    padx=15,
    pady=8,
    cursor="hand2"
)
btn_get_token_debug.pack(side=tk.RIGHT, padx=(8, 0))

# Waybills input
waybills_frame = tk.Frame(card1, bg=JT_WHITE)
waybills_frame.pack(fill=tk.X, pady=(0, 12))

tk.Label(
    waybills_frame, 
    text="üìù M√£ v·∫≠n ƒë∆°n (m·ªói d√≤ng 1 m√£) - Enter ƒë·ªÉ tra c·ª©u:", 
    font=("Segoe UI", 10, "bold"), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack(anchor=tk.W, pady=(0, 4))

txt_waybills = tk.Text(
    waybills_frame, 
    height=6, 
    font=("Consolas", 10), 
    bg=JT_GRAY, 
    relief=tk.SUNKEN, 
    bd=2,
    fg=JT_LABEL,
    wrap=tk.WORD
)
txt_waybills.pack(fill=tk.X)

# Counter v√† controls row
counter_controls_frame = tk.Frame(card1, bg=JT_WHITE)
counter_controls_frame.pack(fill=tk.X, pady=(8, 12))

# Left side - Counter
counter_side = tk.Frame(counter_controls_frame, bg=JT_WHITE)
counter_side.pack(side=tk.LEFT)

frame_count = tk.Frame(counter_side, bg=JT_RED, relief=tk.RAISED, bd=2)
frame_count.pack()

lbl_count_title = tk.Label(
    frame_count, 
    text="üìä ƒê√£ nh·∫≠p:", 
    font=("Segoe UI", 8, "bold"), 
    fg=JT_WHITE, 
    bg=JT_RED
)
lbl_count_title.pack(padx=8, pady=(4, 0))

lbl_count_waybills = tk.Label(
    frame_count, 
    text="0", 
    font=("Segoe UI", 14, "bold"), 
    fg=JT_WHITE, 
    bg=JT_RED, 
    width=6
)
lbl_count_waybills.pack(padx=8, pady=(0, 4))

# Right side - Month selector
month_side = tk.Frame(counter_controls_frame, bg=JT_WHITE)
month_side.pack(side=tk.RIGHT)

tk.Label(
    month_side, 
    text="üìÖ Th√°ng tra c·ª©u:", 
    font=("Segoe UI", 9), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack()

cb_month_top = ttk.Combobox(
    month_side, 
    values=month_list, 
    font=("Segoe UI", 9), 
    width=12, 
    state="readonly"
)
cb_month_top.set(f"{now.month:02d}-{now.year}")
cb_month_top.pack(pady=(2, 0))

# Date range display
lbl_range_top = tk.Label(
    month_side, 
    text="", 
    font=("Segoe UI", 8), 
    fg=JT_GRAY_DARK, 
    bg=JT_WHITE
)
lbl_range_top.pack(pady=(2, 0))

def update_range_top(event=None):
    start, end = get_start_end_from_month(cb_month_top.get())
    lbl_range_top.config(text=f"{start.strftime('%d/%m')} - {end.strftime('%d/%m/%Y')}")
cb_month_top.bind("<<ComboboxSelected>>", update_range_top)
update_range_top()

# Stealth mode controls
stealth_frame = tk.Frame(card1, bg=JT_WHITE)
stealth_frame.pack(fill=tk.X, pady=(0, 12))

stealth_left = tk.Frame(stealth_frame, bg=JT_WHITE)
stealth_left.pack(side=tk.LEFT)

chk_stealth = tk.Checkbutton(
    stealth_left, 
    text="ü•∑ Ch·∫ø ƒë·ªô ch·ªëng Ban Acc", 
    variable=stealth_mode, 
    bg=JT_WHITE,
    font=("Segoe UI", 9),
    fg=JT_LABEL
)
chk_stealth.pack()

stealth_right = tk.Frame(stealth_frame, bg=JT_WHITE)
stealth_right.pack(side=tk.RIGHT)

tk.Label(
    stealth_right, 
    text="‚è±Ô∏è Ch·ªù:", 
    font=("Segoe UI", 9), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack(side=tk.LEFT)

txt_delay_min = tk.Entry(
    stealth_right, 
    width=3, 
    textvariable=delay_min, 
    font=("Segoe UI", 9), 
    bg=JT_GRAY, 
    relief=tk.FLAT, 
    bd=4,
    justify=tk.CENTER
)
txt_delay_min.pack(side=tk.LEFT, padx=(4, 2))

tk.Label(stealth_right, text="-", font=("Segoe UI", 9), fg=JT_LABEL, bg=JT_WHITE).pack(side=tk.LEFT)

txt_delay_max = tk.Entry(
    stealth_right, 
    width=3, 
    textvariable=delay_max, 
    font=("Segoe UI", 9), 
    bg=JT_GRAY, 
    relief=tk.FLAT, 
    bd=4,
    justify=tk.CENTER
)
txt_delay_max.pack(side=tk.LEFT, padx=(2, 4))

tk.Label(stealth_right, text="gi√¢y", font=("Segoe UI", 9), fg=JT_GRAY_DARK, bg=JT_WHITE).pack(side=tk.LEFT)

# Main action button v·ªõi vi·ªÅn
btn_tra_cuu = tk.Button(
    card1, 
    text="üöÄ B·∫ÆT ƒê·∫¶U TRA C·ª®U", 
    command=tra_cuu, 
    font=("Segoe UI", 11, "bold"), 
    bg=JT_RED, 
    fg=JT_WHITE, 
    relief=tk.RAISED, 
    bd=2,
    pady=12,
    cursor="hand2"
)
btn_tra_cuu.pack(fill=tk.X)

# Progress/countdown frame v·ªõi vi·ªÅn (hidden by default)
countdown_frame = tk.Frame(card1, bg=JT_WARNING, relief=tk.RAISED, bd=2)
countdown_frame.pack(fill=tk.X, pady=(8, 0))

countdown_label = tk.Label(
    countdown_frame, 
    text="", 
    font=("Segoe UI", 10, "bold"), 
    fg=JT_WHITE, 
    bg=JT_WARNING
)
countdown_label.pack(pady=6)
# Function ƒë·∫øm s·ªë m√£ v·∫≠n ƒë∆°n realtime v·ªõi m√†u ƒë·∫πp
def update_waybill_count(event=None):
    content = txt_waybills.get("1.0", tk.END).strip()
    if not content:
        count = 0
    else:
        lines = [line.strip() for line in content.splitlines() if line.strip()]
        count = len(lines)
    
    lbl_count_waybills.config(text=str(count))
    
    # Modern color scheme
    if count == 0:
        color = JT_GRAY_DARK
    elif count <= 5:
        color = JT_RESULT  # Xanh success
    elif count <= 15:
        color = JT_WARNING  # V√†ng warning  
    elif count <= 30:
        color = JT_INFO     # Xanh info
    else:
        color = JT_RED      # ƒê·ªè khi qu√° nhi·ªÅu
    
    frame_count.config(bg=color)
    lbl_count_title.config(bg=color)
    lbl_count_waybills.config(bg=color)

# Bind events
txt_waybills.bind('<KeyRelease>', update_waybill_count)
txt_waybills.bind('<Button-1>', update_waybill_count)
# Bind Enter key ƒë·ªÉ tra c·ª©u
txt_waybills.bind('<Return>', lambda event: tra_cuu())  # Enter ƒë·ªÉ tra c·ª©u
# ======= CARD 2: SINGLE LOOKUP - Enhanced v·ªõi vi·ªÅn =======
card2 = tk.LabelFrame(
    left_panel, 
    text="  üìû Tra c·ª©u ƒê∆°n l·∫ª (Theo SƒêT)  ", 
    font=("Segoe UI", 12, "bold"), 
    fg=JT_TITLE, 
    bg=JT_WHITE, 
    bd=2,
    relief=tk.GROOVE,
    padx=15,
    pady=15
)
card2.pack(fill=tk.X)

# Phone input row
phone_row = tk.Frame(card2, bg=JT_WHITE)
phone_row.pack(fill=tk.X, pady=(0, 12))

phone_left = tk.Frame(phone_row, bg=JT_WHITE)
phone_left.pack(side=tk.LEFT, fill=tk.X, expand=True)

tk.Label(
    phone_left, 
    text="üì± S·ªë ƒëi·ªán tho·∫°i:", 
    font=("Segoe UI", 10, "bold"), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack(anchor=tk.W, pady=(0, 4))

txt_phone = tk.Entry(
    phone_left, 
    font=("Consolas", 12, "bold"), 
    fg=JT_TITLE, 
    bg=JT_GRAY, 
    relief=tk.SUNKEN, 
    bd=2
)
txt_phone.pack(fill=tk.X)

# Month selector for single lookup
phone_right = tk.Frame(phone_row, bg=JT_WHITE, width=120)
phone_right.pack(side=tk.RIGHT, padx=(12, 0))
phone_right.pack_propagate(False)

tk.Label(
    phone_right, 
    text="üìÖ Th√°ng:", 
    font=("Segoe UI", 9), 
    fg=JT_LABEL, 
    bg=JT_WHITE
).pack(pady=(0, 4))

cb_month_shipper = ttk.Combobox(
    phone_right, 
    values=month_list, 
    font=("Segoe UI", 9), 
    width=10, 
    state="readonly"
)
cb_month_shipper.set(f"{now.month:02d}-{now.year}")
cb_month_shipper.pack()

lbl_range_shipper = tk.Label(
    phone_right, 
    text="", 
    font=("Segoe UI", 7), 
    fg=JT_GRAY_DARK, 
    bg=JT_WHITE
)
lbl_range_shipper.pack(pady=(2, 0))

def update_range_shipper(event=None):
    start, end = get_start_end_from_month(cb_month_shipper.get())
    lbl_range_shipper.config(text=f"{start.strftime('%d/%m')} - {end.strftime('%d/%m')}")
cb_month_shipper.bind("<<ComboboxSelected>>", update_range_shipper)
update_range_shipper()

# Action button v·ªõi vi·ªÅn
btn_tra_cuu_shipper = tk.Button(
    card2, 
    text="üîç TRA C·ª®U SHIPPER", 
    command=tra_cuu_shipper, 
    font=("Segoe UI", 10, "bold"), 
    bg=JT_INFO, 
    fg=JT_WHITE, 
    relief=tk.RAISED, 
    bd=2,
    pady=10,
    cursor="hand2"
)
btn_tra_cuu_shipper.pack(fill=tk.X, pady=(0, 10))

# Result display
lbl_shipper_result = tk.Label(
    card2, 
    text="K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...", 
    fg=JT_GRAY_DARK, 
    font=("Segoe UI", 10), 
    bg=JT_WHITE,
    wraplength=400,
    justify=tk.LEFT
)
lbl_shipper_result.pack(fill=tk.X)

# Bind Enter key for phone input
txt_phone.bind("<Return>", lambda event: tra_cuu_shipper())

# ======= MODERN RESULTS PANEL - Enhanced v·ªõi vi·ªÅn =======
results_card = tk.LabelFrame(
    right_panel, 
    text="  üìã K·∫øt qu·∫£ tra c·ª©u  ", 
    font=("Segoe UI", 12, "bold"), 
    fg=JT_TITLE, 
    bg=JT_WHITE, 
    bd=2,
    relief=tk.GROOVE,
    padx=15,
    pady=15
)
results_card.pack(fill=tk.BOTH, expand=True)

# Info bar
info_frame = tk.Frame(results_card, bg=JT_WHITE)
info_frame.pack(fill=tk.X, pady=(0, 10))

info_label = tk.Label(
    info_frame,
    text="üí° Double-click v√†o √¥ ƒë·ªÉ copy d·ªØ li·ªáu",
    font=("Segoe UI", 9),
    fg=JT_GRAY_DARK,
    bg=JT_WHITE
)
info_label.pack(side=tk.LEFT)

# Results count
results_count_label = tk.Label(
    info_frame,
    text="üìä 0 k·∫øt qu·∫£",
    font=("Segoe UI", 9, "bold"),
    fg=JT_INFO,
    bg=JT_WHITE
)
results_count_label.pack(side=tk.RIGHT)

# Treeview container with scrollbar
tree_container = tk.Frame(results_card, bg=JT_WHITE)
tree_container.pack(fill=tk.BOTH, expand=True)

# Modern treeview
cols = ("M√£ v·∫≠n ƒë∆°n", "S·ªë ƒëi·ªán tho·∫°i", "T√™n shipper")
tree = ttk.Treeview(tree_container, columns=cols, show="headings", height=30)

# Configure columns v·ªõi ƒë∆∞·ªùng k·∫ª d·ªçc ngƒÉn c√°ch
tree.heading("M√£ v·∫≠n ƒë∆°n", text="üì¶ M√£ v·∫≠n ƒë∆°n")
tree.heading("S·ªë ƒëi·ªán tho·∫°i", text="üì± S·ªë ƒëi·ªán tho·∫°i") 
tree.heading("T√™n shipper", text="üë§ T√™n shipper")

tree.column("M√£ v·∫≠n ƒë∆°n", width=120, anchor="center", minwidth=100)
tree.column("S·ªë ƒëi·ªán tho·∫°i", width=120, anchor="center", minwidth=100)
tree.column("T√™n shipper", width=180, anchor="w", minwidth=150)

# Scrollbars
v_scrollbar = ttk.Scrollbar(tree_container, orient="vertical", command=tree.yview)
h_scrollbar = ttk.Scrollbar(tree_container, orient="horizontal", command=tree.xview)
tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

# Pack treeview and scrollbars
tree.grid(row=0, column=0, sticky="nsew")
v_scrollbar.grid(row=0, column=1, sticky="ns")
h_scrollbar.grid(row=1, column=0, sticky="ew")

tree_container.grid_rowconfigure(0, weight=1)
tree_container.grid_columnconfigure(0, weight=1)

# ======= MODERN TREEVIEW STYLE =======
style = ttk.Style()
style.theme_use('clam')  # Modern theme

# Configure treeview v·ªõi ƒë∆∞·ªùng k·∫ª grid cho d·ªØ li·ªáu
style.configure("Treeview",
    background=JT_WHITE,
    foreground=JT_LABEL,
    rowheight=35,
    fieldbackground=JT_WHITE,
    font=("Segoe UI", 10),
    borderwidth=1,
    relief="solid",
    focuscolor="none",
    selectbackground=JT_RED_LIGHT,
    selectforeground=JT_LABEL
)

# Configure heading kh√¥ng c√≥ vi·ªÅn  
style.configure("Treeview.Heading",
    background=JT_RED,
    foreground=JT_WHITE,
    font=("Segoe UI", 10, "bold"),
    borderwidth=0,
    relief="flat"
)

# Hover effects
style.map("Treeview",
    background=[('selected', JT_RED_LIGHT)],
    foreground=[('selected', JT_LABEL)]
)

style.map("Treeview.Heading",
    background=[('active', JT_RED_DARK)]
)

# ======= MODERN NOTIFICATION SYSTEM - Enhanced v·ªõi vi·ªÅn =======
notification_frame = tk.Frame(main_container, bg=JT_GRAY, height=40, relief=tk.RIDGE, bd=1)
notification_frame.pack(fill=tk.X, side=tk.BOTTOM)
notification_frame.pack_propagate(False)

copy_notify_label = tk.Label(
    notification_frame, 
    text="", 
    font=("Segoe UI", 11, "bold"), 
    fg=JT_WHITE, 
    bg=JT_RESULT,
    relief=tk.FLAT,
    bd=0
)
copy_notify_label.pack(expand=True, fill=tk.BOTH)
copy_notify_label.pack_forget()  # Hide initially

def show_copy_notify(msg, color=JT_RESULT):
    copy_notify_label.config(text=f"  {msg}  ", bg=color)
    copy_notify_label.pack(expand=True, fill=tk.BOTH)
    
    # Auto hide after 3 seconds
    def hide_notification():
        copy_notify_label.pack_forget()
    
    copy_notify_label.after(3000, hide_notification)

# ======= ENHANCED DOUBLE-CLICK TO COPY WITH FLOATING NOTIFICATION =======
def show_floating_copy_notification(text, x, y):
    """Hi·ªÉn th·ªã th√¥ng b√°o copy n·ªïi v·ªõi animation"""
    # T·∫°o popup window cho th√¥ng b√°o
    popup = tk.Toplevel(root)
    popup.wm_overrideredirect(True)  # B·ªè title bar
    popup.configure(bg=JT_RESULT)
    popup.attributes('-topmost', True)  # Lu√¥n ·ªü tr√™n c√πng
    
    # T√≠nh to√°n v·ªã tr√≠ hi·ªÉn th·ªã
    popup_x = root.winfo_x() + x + 20
    popup_y = root.winfo_y() + y - 30
    popup.geometry(f"+{popup_x}+{popup_y}")
    
    # T·∫°o frame v·ªõi vi·ªÅn ƒë·∫πp
    frame = tk.Frame(popup, bg=JT_RESULT, relief=tk.RAISED, bd=2)
    frame.pack(padx=2, pady=2)
    
    # Icon v√† text
    label = tk.Label(
        frame,
        text=f"üìã ƒê√£ copy: {text}",
        font=("Segoe UI", 10, "bold"),
        fg=JT_WHITE,
        bg=JT_RESULT,
        padx=15,
        pady=8
    )
    label.pack()
    
    # Animation fade out
    alpha = 1.0
    def fade_out():
        nonlocal alpha
        alpha -= 0.05
        if alpha <= 0:
            popup.destroy()
            return
        try:
            popup.attributes('-alpha', alpha)
            popup.after(50, fade_out)
        except:
            popup.destroy()
    
    # B·∫Øt ƒë·∫ßu fade sau 2 gi√¢y
    popup.after(2000, fade_out)

def on_treeview_double_click(event):
    item = tree.identify_row(event.y)
    col = tree.identify_column(event.x)
    if not item or not col:
        return
        
    col_idx = int(col.replace('#', '')) - 1
    values = tree.item(item, 'values')
    if col_idx < 0 or col_idx >= len(values):
        return
        
    value = values[col_idx]
    if value:
        root.clipboard_clear()
        root.clipboard_append(value)
        root.update()
        
        # Hi·ªÉn th·ªã th√¥ng b√°o n·ªïi t·∫°i v·ªã tr√≠ chu·ªôt
        show_floating_copy_notification(value, event.x_root - root.winfo_x(), event.y_root - root.winfo_y())
        
        # V·∫´n gi·ªØ th√¥ng b√°o d∆∞·ªõi ƒë·ªÉ backup
        col_names = ["M√£ v·∫≠n ƒë∆°n", "SƒêT", "T√™n shipper"]
        col_name = col_names[col_idx] if col_idx < len(col_names) else "D·ªØ li·ªáu"
        show_copy_notify(f"üìã ƒê√£ copy {col_name}: {value}", JT_INFO)

tree.bind("<Double-1>", on_treeview_double_click)

# Update results count when tree changes
def update_results_count():
    count = len(tree.get_children())
    results_count_label.config(text=f"üìä {count} k·∫øt qu·∫£")

# Bind to tree changes (this is a simple approach, could be enhanced)
original_insert = tree.insert
def enhanced_insert(*args, **kwargs):
    result = original_insert(*args, **kwargs)
    root.after_idle(update_results_count)
    return result
tree.insert = enhanced_insert

original_delete = tree.delete
def enhanced_delete(*args, **kwargs):
    result = original_delete(*args, **kwargs)
    root.after_idle(update_results_count)
    return result
tree.delete = enhanced_delete

# Initialize
update_results_count()
root.mainloop() 